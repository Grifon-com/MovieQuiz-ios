import Foundation

class QuestionFactory: QuestionFactoryProtocol {
    private let moviesLoder: MoviesLoading
    private weak var delegate: QuestionFactoryDelegate?
    
    private var movies: [MostPopularMovie] = []
    
    /* –º–∞—Å—Å–∏–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
     private let questions: [QuizQuestion] =
     [QuizQuestion(image: "The Godfather", text: "–†–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –±–æ–ª—å—à–µ —á–µ–º 9,2?", correctAnswer: true),
     QuizQuestion(image: "The Dark Knight", text: "–†–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –±–æ–ª—å—à–µ —á–µ–º 9?", correctAnswer: true),
     QuizQuestion(image: "Kill Bill", text: "–†–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –±–æ–ª—å—à–µ —á–µ–º 8,1?", correctAnswer: true),
     QuizQuestion(image: "The Avengers", text: "–†–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –±–æ–ª—å—à–µ —á–µ–º 8?", correctAnswer: true),
     QuizQuestion(image: "Deadpool", text: "–†–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –±–æ–ª—å—à–µ —á–µ–º 8?", correctAnswer: true),
     QuizQuestion(image: "The Green Knight", text: "–†–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –±–æ–ª—å—à–µ —á–µ–º 6,6?", correctAnswer: true),
     QuizQuestion(image: "Old", text: "–†–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –±–æ–ª—å—à–µ —á–µ–º 5,8?", correctAnswer: false),
     QuizQuestion(image: "The Ice Age Adventures of Buck Wild", text: "–†–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –±–æ–ª—å—à–µ —á–µ–º 4,3?", correctAnswer: false),
     QuizQuestion(image: "Tesla", text: "–†–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –±–æ–ª—å—à–µ —á–µ–º 5,1?", correctAnswer: false),
     QuizQuestion(image: "Vivarium", text: "–†–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –±–æ–ª—å—à–µ —á–µ–º 5,8?", correctAnswer: false)
     ]
     */
    
    
    /// —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
    struct MyError: Error {
        let localizedDescription = "Failed to load image"
    }
    
    init(moviesLoader: MoviesLoading, delegate: QuestionFactoryDelegate?) {
        self.moviesLoder = moviesLoader
        self.delegate = delegate
    }
    
    func loadData() {
        moviesLoder.loadMovies {[weak self] result in
            guard let self = self else { return }
            DispatchQueue.main.async {
                /// –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
                switch result {
                case .success(let mostPopularMovies):
                    self.movies = mostPopularMovies.items /// —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å–º—ã –≤ –Ω–∞—à—É –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
                    self.delegate?.didLoadDataFromServer() /// —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
                case .failure(let error):
                    self.delegate?.didFailToLoadData(with: error) /// —Å–æ–æ–±—â–∞–µ–º –æ –æ—à–∏–±–∫–µ
                }
            }
        }
    }
    
    //–ø–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º
    func requestNextQuestion() {
        DispatchQueue.global().async { [weak self] in
            guard let self = self else { return }
            let index = (0..<self.movies.count).randomElement() ?? 0
            
            guard let movie = self.movies[safe: index] else { return }
            
            var imageData = Data()
            
            do {
                imageData = try Data(contentsOf: movie.resizedImageURL)
            } catch {
                print("Failed to load image")
                /// ???????
                /// –∑–¥–µ—Å—å —è —Ä–µ—à–∏–ª –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –æ—à–∏–±–∫—É –∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –æ—à–∏–±–∫—É –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–ª–µ—Ä—Ç–∞ (–ø—Ä–æ—à—É –Ω–µ –∑–∞—â–∏—Ç—ã–≤–∞—Ç—å –∫–∞–∫ –æ—à–∏–±–∫—Éüôè)
                DispatchQueue.main.async {[weak self] in
                    guard let self = self else {return}
                    let myError = MyError()
                    self.delegate?.didFailToLoadData(with: myError)
                }
                
                let rating = Float(movie.rating) ?? 0
                let randomArrayRating = 6...9
                let randomRating = randomArrayRating.randomElement() ?? 7
                let text = "–†–µ–π—Ç–∏–Ω–≥ —ç—Ç–æ–≥–æ —Ñ–∏–ª—å–º–∞ –±–æ–ª—å—à–µ —á–µ–º \(randomRating)?"
                let correctAnswer = rating > Float(randomRating)
                
                let question = QuizQuestion(image: imageData,
                                            text: text,
                                            correctAnswer: correctAnswer)
                
                DispatchQueue.main.async { [weak self] in
                    guard let self = self else { return }
                    self.delegate?.didReceiveNextQuestion(question: question)
                }
            }
        }
    }
    
}
